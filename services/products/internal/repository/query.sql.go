// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package repository

import (
	"context"
	"database/sql"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories(name) VALUES ($1)
RETURNING id
`

func (q *Queries) CreateCategory(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRowContext(ctx, createCategory, name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createProduct = `-- name: CreateProduct :one
INSERT INTO products(name, price, stock, category_id, img_url)
VALUES ($1, $2, $3, $4, $5)
RETURNING id
`

type CreateProductParams struct {
	Name       string
	Price      int32
	Stock      int32
	CategoryID sql.NullInt64
	ImgUrl     sql.NullString
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.Name,
		arg.Price,
		arg.Stock,
		arg.CategoryID,
		arg.ImgUrl,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCategory, id)
	return err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getCategoryById = `-- name: GetCategoryById :one
SELECT id, name FROM categories WHERE id = $1
`

func (q *Queries) GetCategoryById(ctx context.Context, id int64) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategoryById, id)
	var i Category
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getCategoryByName = `-- name: GetCategoryByName :one
SELECT id, name FROM categories WHERE name = $1
`

func (q *Queries) GetCategoryByName(ctx context.Context, name string) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategoryByName, name)
	var i Category
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getProductById = `-- name: GetProductById :one
SELECT id, name, img_url, price, stock, category_id FROM products WHERE id = $1
`

func (q *Queries) GetProductById(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductById, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImgUrl,
		&i.Price,
		&i.Stock,
		&i.CategoryID,
	)
	return i, err
}

const isCategoryExistByID = `-- name: IsCategoryExistByID :one
SELECT EXISTS(SELECT TRUE FROM categories WHERE id = $1)
`

func (q *Queries) IsCategoryExistByID(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRowContext(ctx, isCategoryExistByID, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const isCategoryExistByName = `-- name: IsCategoryExistByName :one
SELECT EXISTS(SELECT TRUE FROM categories WHERE name = $1)
`

func (q *Queries) IsCategoryExistByName(ctx context.Context, name string) (bool, error) {
	row := q.db.QueryRowContext(ctx, isCategoryExistByName, name)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const isProductExistByID = `-- name: IsProductExistByID :one
SELECT EXISTS(SELECT TRUE FROM products WHERE id = $1)
`

func (q *Queries) IsProductExistByID(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRowContext(ctx, isProductExistByID, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const isProductExistByName = `-- name: IsProductExistByName :one
SELECT EXISTS(SELECT TRUE FROM products WHERE name = $1)
`

func (q *Queries) IsProductExistByName(ctx context.Context, name string) (bool, error) {
	row := q.db.QueryRowContext(ctx, isProductExistByName, name)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const listCategories = `-- name: ListCategories :many
SELECT id, name FROM categories
`

func (q *Queries) ListCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProducts = `-- name: ListProducts :many
SELECT id, name, img_url, price, stock, category_id FROM products
WHERE name ILIKE $1
ORDER BY $2::text ASC
LIMIT $3 OFFSET $4
`

type ListProductsParams struct {
	Name    string
	Column2 string
	Limit   int32
	Offset  int32
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts,
		arg.Name,
		arg.Column2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ImgUrl,
			&i.Price,
			&i.Stock,
			&i.CategoryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductsByCategoryName = `-- name: ListProductsByCategoryName :many
SELECT p.id, p.name, img_url, price, stock, category_id, c.id, c.name FROM products as p 
JOIN categories as c 
ON p.category_id = c.id 
WHERE c.name ILIKE $1
LIMIT $2 OFFSET $3
`

type ListProductsByCategoryNameParams struct {
	Name   string
	Limit  int32
	Offset int32
}

type ListProductsByCategoryNameRow struct {
	ID         int64
	Name       string
	ImgUrl     sql.NullString
	Price      int32
	Stock      int32
	CategoryID sql.NullInt64
	ID_2       int64
	Name_2     string
}

func (q *Queries) ListProductsByCategoryName(ctx context.Context, arg ListProductsByCategoryNameParams) ([]ListProductsByCategoryNameRow, error) {
	rows, err := q.db.QueryContext(ctx, listProductsByCategoryName, arg.Name, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListProductsByCategoryNameRow
	for rows.Next() {
		var i ListProductsByCategoryNameRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ImgUrl,
			&i.Price,
			&i.Stock,
			&i.CategoryID,
			&i.ID_2,
			&i.Name_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :exec
UPDATE categories SET name = $1 WHERE id = $2
`

type UpdateCategoryParams struct {
	Name string
	ID   int64
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) error {
	_, err := q.db.ExecContext(ctx, updateCategory, arg.Name, arg.ID)
	return err
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE products
SET name = $1, img_url = $2, price = $3, stock = $4, category_id = $5
WHERE id = $6
`

type UpdateProductParams struct {
	Name       string
	ImgUrl     sql.NullString
	Price      int32
	Stock      int32
	CategoryID sql.NullInt64
	ID         int64
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.ExecContext(ctx, updateProduct,
		arg.Name,
		arg.ImgUrl,
		arg.Price,
		arg.Stock,
		arg.CategoryID,
		arg.ID,
	)
	return err
}
